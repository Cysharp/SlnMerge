name: Build-Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "tag: git tag you want create. (sample 1.0.0)"
        required: true
      dry_run:
        description: "dry_run: true will never create release/nuget."
        required: true
        default: "false"

env:
  GIT_TAG: ${{ github.event.inputs.tag }}
  DRY_RUN: ${{ github.event.inputs.dry_run }}
  DRY_RUN_BRANCH_PREFIX: "test_release"
  DOTNET_SDK_VERISON_3: 3.1.x

jobs:
  update-packagejson:
    runs-on: ubuntu-latest
    env:
      TARGET_FILE: ./src/package.json
    outputs:
      sha: ${{ steps.commit.outputs.sha }}
    steps:
      - uses: actions/checkout@v2
      - name: Output package.json (Before)
        run: cat ${{ env.TARGET_FILE}}

      - name: Update package.json to version ${{ env.GIT_TAG }}
        run: sed -i -e "s/\(\"version\":\) \"\(.*\)\",/\1 \"${{ env.GIT_TAG }}\",/" ${{ env.TARGET_FILE }}

      - name: Check update
        id: check_update
        run: |
          cat ${{ env.TARGET_FILE}}
          git diff --exit-code || echo "::set-output name=changed::1"

      - name: Commit files
        id: commit
        if: steps.check_update.outputs.changed == '1'
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -m "feat: Update package.json to ${{ env.GIT_TAG }}" -a
          echo "::set-output name=sha::$(git rev-parse HEAD)"

      - name: Check sha
        run: echo "SHA ${SHA}"
        env:
          SHA: ${{ steps.commit.outputs.sha }}

      - name: Create Tag
        if: steps.check_update.outputs.changed == '1'
        run: git tag ${{ env.GIT_TAG }}

      - name: Push changes
        if: env.DRY_RUN == 'false' && steps.check_update.outputs.changed == '1'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
          tags: true

      - name: Push changes (dry_run)
        if: env.DRY_RUN == 'true' && steps.check_update.outputs.changed == '1'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.DRY_RUN_BRANCH_PREFIX }}-${{ env.GIT_TAG }}
          tags: false

  build-dotnet:
    needs: [update-packagejson]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      NUGET_XMLDOC_MODE: skip
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERISON_3 }}
      # pack nuget
      - run: dotnet build -c Release test/SlnMerge.Tests -p:Version=${{ env.GIT_TAG }}
      - run: dotnet test -c Release --no-build test/SlnMerge.Tests -p:Version=${{ env.GIT_TAG }}

      # no unity build

  create-release:
    if: github.event.inputs.dry_run == 'false'
    needs: [update-packagejson, build-dotnet]
    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      NUGET_XMLDOC_MODE: skip
    steps:
      # setup dotnet for nuget push
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERISON_3 }}
      # Create Release
      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.GIT_TAG }}
          release_name: Ver.${{ env.GIT_TAG }}
          commitish: ${{ needs.update-packagejson.outputs.sha }}
          draft: true
          prerelease: false

  cleanup:
    if: github.event.inputs.dry_run == 'true'
    needs: [build-dotnet]
    runs-on: ubuntu-latest
    steps:
      - name: Delete branch
        uses: dawidd6/action-delete-branch@v3
        with:
          github_token: ${{ github.token }}
          branches: ${{ env.DRY_RUN_BRANCH_PREFIX }}-${{ env.GIT_TAG }}
